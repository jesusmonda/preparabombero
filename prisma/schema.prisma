generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int        @id @default(autoincrement())
  email                String     @unique
  name                 String
  surname              String
  password             String
  role                 UserRole   @default(USER)
  subscribed           Boolean    @default(false)
  subscription_id      String?
  cancellation_pending Boolean    @default(false)
  token                String     @default(uuid())
  ips                  Ip[]
  quizStats            QuizStat[]
}

model Pdf {
  id        Int    @id @default(autoincrement())
  community String?
  city      String
  year      String
  type      String?
  subtype   String?
  name      String
  quizzes   Quiz[]
}

model Ip {
  id     Int    @id @default(autoincrement())
  ip     String
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Topic {
  id            Int      @id @default(autoincrement())
  title         String
  categoryTitle String?
  parentId      Int?
  created_at    DateTime @default(now())
  quizzes       Quiz[]
  parent        Topic?   @relation("Topics", fields: [parentId], references: [id], onDelete: Cascade)
  topics        Topic[]  @relation("Topics")
  order         Int
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Quiz {
  id            Int      @id @default(autoincrement())
  title         String
  option1       String
  option2       String
  option3       String
  option4       String
  result        String
  /// TODO Eliminar ?
  topicId       Int?
  /// TODO Eliminar ?
  justification String?
  created_at    DateTime @default(now())
  /// TODO Eliminar campo
  pdf_name      String?
  topic         Topic?   @relation(fields: [topicId], references: [id], onDelete: Cascade)
  reports       Report[]
  // Eliminar default 0 cuando esten los pdf en prod.
  pdfId         Int      @default(0)
  pdf           Pdf      @relation(fields: [pdfId], references: [id], onDelete: Restrict)

  @@unique([title, option1, option2, option3, option4, pdf_name])
}

model QuizStat {
  id           Int      @id @default(autoincrement())
  userId       Int
  success      Int
  fail         Int
  not_answered Int
  created_at   DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id     Int    @id @default(autoincrement())
  reason String @unique
  quizId Int
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Info {
  id          Int    @id @default(0)
  title       String @unique
  description String @unique
}

enum UserRole {
  ADMIN
  USER
}
